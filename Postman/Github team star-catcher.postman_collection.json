{
	"info": {
		"_postman_id": "ef8d4bd1-fcc8-4061-a304-6d9a27059d1c",
		"name": "Github team star-catcher",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27092674"
	},
	"item": [
		{
			"name": "CREATE A REPOSITORY FOR A AUTHENTICATED USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking status for post request github\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const name = pm.response.json().name\r",
							"pm.environment.set(\"Reponame\", name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"name\": \"{{Reponame}}\",\r\n  \"description\": \"This is your first repo!\"\r\n\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/user/repos"
			},
			"response": []
		},
		{
			"name": "UPDATE A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking status for update a repository\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const name = pm.response.json().name\r",
							"pm.environment.set(\"Reponame\", name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{updateReponame}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}"
			},
			"response": []
		},
		{
			"name": "GET A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking status for get a repository\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}"
			},
			"response": []
		},
		{
			"name": "CREATE FILE CONTENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const shs = pm.response.json().content.sha;\r",
							"pm.environment.set(\"shs\", shs);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"message\":\"File Successfully Created\",\r\n    \"content\":\"{{encoded}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/contents/readme.txt"
			},
			"response": []
		},
		{
			"name": "CREATE A FORK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking status code for create a fork\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"organization\":\"Team-Star-Catcher\",\r\n    \"name\":\"create-a-fork\",\r\n    \"default_branch_only\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/forks"
			},
			"response": []
		},
		{
			"name": "LIST FORKS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"checking status for list forks 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/forks"
			},
			"response": []
		},
		{
			"name": "LIST REPOSITORIES FOR A USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"checking status for 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/users/{{owner}}/repos"
			},
			"response": []
		},
		{
			"name": "LIST REPOSITORY LANGUAGE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/languages"
			},
			"response": []
		},
		{
			"name": "LIST PUBLIC REPOSITORIES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.set(\"encoded\", btoa(\"Updated Hello World\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repositories"
			},
			"response": []
		},
		{
			"name": "LIST REPOSITORY TAGS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/tags"
			},
			"response": []
		},
		{
			"name": "CREATE AN AUTOLINK REFERENCE FOR A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const ID=pm.response.json().id;\r",
							"pm.environment.set(\"id\", ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"key_prefix\": \"TICKEtT-API_testing\",\r\n  \"url_template\": \"https://example.com/TICKET?query=<num>\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/autolinks"
			},
			"response": []
		},
		{
			"name": "GET AN AUTOLINK REFERENCE FOR A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/autolinks/{{id}}"
			},
			"response": []
		},
		{
			"name": "GET A REPOSITORY Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checking status for get a repository\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}"
			},
			"response": []
		},
		{
			"name": "REPLACE ALL REPOSITORY TOPICS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"names\": [\r\n        \"redux\",\r\n        \"react\",\r\n        \"chakra\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/topics"
			},
			"response": []
		},
		{
			"name": "GET ALL REPOSITORY TOPICS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/topics"
			},
			"response": []
		},
		{
			"name": "Delete a Fork",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/repos/Team-Star-Catcher/create-a-fork"
			},
			"response": []
		},
		{
			"name": "DELETE FROM AN AUTOLINK REFERENCE FOR A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/autolinks/{{id}}"
			},
			"response": []
		},
		{
			"name": "DELETE A FILE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"sha\":\"{{shs}}\",\r\n     \"message\":\"file deleted\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}/contents/readme.txt"
			},
			"response": []
		},
		{
			"name": "DELETE A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/repos/{{owner}}/{{Reponame}}"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}